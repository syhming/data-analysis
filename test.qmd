---
title: "Logistic Regression Machine Learning demo"
format:
    html:
        code-fold: true
        code-overflow: wrap
        link-external-filter: '^(?:http:|https:)\/\/www\.github\.com\/syhming\/data\-analysis\-projects'
        other-links: 
            - text: Census Income Dataset
              href: https://archive.ics.uci.edu/dataset/2/adult
            - text: Back to homepage
              href: https://syhming.github.io/data-analysis-projects/
toc: true
jupyter: python3
---
## Introduction
This is based off of a machine learning data science project on logistic regression from Codecademy. Here we examine income class and develop a machine learning model to predict if an individual's income exceeds $50,000. This based off 1994 Census data from UCI's database: https://archive.ics.uci.edu/dataset/2/adult.


## Loading in Data

```{python}
#| label: load-data


#a project off codecademy on logistic regression, finding ROC curves
# from UCI data archive https://archive.ics.uci.edu/dataset/20/census+income
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score, precision_score, recall_score, f1_score, roc_curve, roc_auc_score
from sklearn.preprocessing import StandardScaler

#import codecademylib3
import matplotlib.pyplot as plt
import seaborn as sns

from ucimlrepo import fetch_ucirepo 
from tabulate import tabulate

# fetch dataset 
census_income = fetch_ucirepo(id=20) 
  
# data (as pandas dataframes) 
X = census_income.data.features 
y = census_income.data.targets 
  
# metadata 
#print(census_income.metadata) 
  
# variable information 
#print(census_income.variables) 

y = y.income.str.replace('.','')
df = X.join(y)

#Clean columns by stripping extra whitespace for columns of type "object"
for c in df.select_dtypes(include=['object']).columns:
    df[c] = df[c].str.strip()
print(df.info())

#1. Check Class Imbalance
print(df.income.value_counts())

#2. Create feature dataframe X with feature columns and dummy variables for categorical features
feature_cols = ['age','capital-gain', 'capital-loss', 'hours-per-week', 'sex','race', 'education']

X = pd.get_dummies(df[feature_cols], drop_first=True)


```

## Heatmap
We look for collinearity between features.

```{python}
#| label: fig-heatmap
#| fig-cap: "Heatmap of feature correlation"
#3. Create a heatmap of X data to see feature correlation
sns.heatmap(X.corr())
plt.show()
plt.clf()
```

```{python}
#| label: tbl-model-params
#| tbl-cap: "Model Parameters"

#4. Create output variable y which is binary, 0 when income is less than 50k, 1 when it is greater than 50k
y = np.where(df['income']=='<=50K', 0, 1)

#5a. Split data into a train and test set
x_train, x_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)

#5b. Fit LR model with sklearn on train set, and predicting on the test set
log_reg = LogisticRegression(C=0.05, penalty='l1', solver='liblinear')
log_reg.fit(x_train, y_train)
y_pred = log_reg.predict(x_test)

#6. Print model parameters (intercept and coefficients)
print('Model Parameters, Intercept:')
print(log_reg.intercept_)

print('Model Parameters, Coeff:')
print(log_reg.coef_)

#model accuracy
print('Accuracy Score on test set:', log_reg.score(x_test, y_test))
```

## Confusion Matrix


```{python}
#| label: tbl-confusion-matrix
#| tbl-cap: "Confusion Matrix on test set"


#7. Evaluate the predictions of the model on the test set. Print the confusion matrix and accuracy score.
#'Confusion Matrix on test set:',
print(tabulate(confusion_matrix(y_test, y_pred), 
    #headers=['<=50K','>50K']
))


```


## ROC
For a Receiver Operating Characteristic (ROC) plot, @fig-roc

```{python}
#| label: fig-roc


# 8.Create new DataFrame of the model coefficients and variable names; sort values based on coefficient
coef_df = pd.DataFrame(zip(X.columns, log_reg.coef_[0]), columns=['vars', 'coef']).sort_values('coef')
coef_df = coef_df[coef_df['coef'].abs()>0].sort_values('coef')
print(coef_df)
#9. barplot of the coefficients sorted in ascending order
sns.barplot(x = coef_df.vars, y = coef_df.coef)
plt.xticks(rotation=90)
plt.show()
plt.clf()
#10. Plot the ROC curve and print the AUC value.
y_pred_prob = log_reg.predict_proba(x_test)
fpr, tpr, _ = roc_curve(y_test, y_pred_prob[:,1])

plt.plot(fpr, tpr)
plt.plot([0,1],[0,1], linestyle='--')
plt.title('ROC Curve')
plt.show()
plt.clf()
```